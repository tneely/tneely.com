{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["FlowState","SECONDS_IN_MINUTE","DEFAULT_STATE","startTime","endTime","flowInput","currentFlow","flowState","Start","flows","inTransition","transitionTime","filterFlowLength","getTimeStamp","Date","now","secondsToMinutes","seconds","Math","round","getOffset","totalTime","displayTimeStamp","time","timeStamp","hours","getHours","minutes","getMinutes","formattedHours","displayTimeSpent","floor","App","props","_this","_this2","this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","saveStateToLocal","Storage","localStorage","setItem","JSON","stringify","StateWrapper","_ref","children","className","react_default","a","createElement","style","animationDuration","doTranistion","nextState","saveState","setState","setTimeout","StartScreen","onClick","handleStartClick","e","FlowPrompt","onSubmit","handleFlowSubmit","type","placeholder","name","value","onChange","handleFlowInputChange","onFocus","handleInputFocus","width","marginRight","target","select","preventDefault","inputFlow","length","startFlow","InFlow","taskName","flow","handlePauseFlowClick","endFlow","objectSpread","concat","toConsumableArray","EndFlowLink","href","handleEndClick","clear","FlowSummary","dayStart","dayEnd","min","max","handleSliderChange","FlowItem","leftOffset","rightOffset","minutesOnFlow","isTotal","map","index","flowTime","key","marginLeft","margin","whiteSpace","event","ResetStateLink","handleResetClick","localStateString","getItem","confirm","parse","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kLAMKA,sOAYL,IAAMC,EAAoB,GAMpBC,EAAgB,CAEpBC,UAAW,EAEXC,QAAS,EAETC,UAAW,GAEXC,YAAa,KAEbC,UAAWP,EAAUQ,MAErBC,MAAO,GAEPC,cAAc,EAEdC,eAAgB,EAEhBC,iBArBkC,IAwD9BC,EAAe,kBAAMC,KAAKC,MAAQ,KAMlCC,EAAmB,SAACC,GAAD,OACvBC,KAAKC,MAAMF,EAAUhB,IAQjBmB,EAAY,SAACjB,EAAmBC,EAAiBiB,GAArC,OACdjB,EAAUD,GAAakB,EAAa,KAMlCC,EAAmB,SAACC,GACxB,IAAMC,EAAY,IAAIV,KAAY,IAAPS,GACrBE,EAAQD,EAAUE,WAClBC,EAAUH,EAAUI,aAGtBC,EAAiBJ,EAAQ,GAK7B,OAJAI,EAA0B,GAATJ,EAAa,GAAKI,GAIX,KAFCF,EAAU,GAAK,IAAMA,EAAUA,IAL3CF,GAAS,GAAK,KAAO,OAc9BK,EAAmB,SAACH,GAIxB,OAHcT,KAAKa,MAAMJ,EAAU,IAGpB,cAFUA,EAAU,GAEe,YA0WrCK,cA/Vb,SAAAA,EAAYC,GAAW,IAAAC,EAAAC,EAAAC,KAGrB,GAHqBC,OAAAC,EAAA,EAAAD,CAAAD,KAAAJ,IACrBE,EAAAG,OAAAE,EAAA,EAAAF,CAAAD,KAAAC,OAAAG,EAAA,EAAAH,CAAAL,GAAAS,KAAAL,KAAMH,KAkBDS,MAAQxC,EAnBQgC,EA2DfS,iBAAmB,WACF,qBAAZC,SACTC,aAAaC,QAAQ,QAASC,KAAKC,UAAUd,EAAKQ,SA7D/BR,EAmEfe,aAEH,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,SAAUC,EAAbF,EAAaE,UAAb,OACHC,EAAAC,EAAAC,cAAA,OACEH,UACElB,EAAKQ,MAAMhC,aACP0C,EACE,WAAaA,EACb,WACFA,EACA,WAAaA,EACb,UAENI,MAAO,CAAEC,kBAAmBvB,EAAKQ,MAAM/B,eAAiB,OAEvDwC,IAlFkBjB,EA4FfwB,aAAe,SACrBC,EACAhD,EACAiD,GAEA1B,EAAK2B,SAAS,CAAEnD,cAAc,EAAMC,eAAgBA,IAEpDmD,WAAW,WACT5B,EAAK2B,SAAS,CAAEtD,UAAWoD,EAAWjD,cAAc,GAAS,WACvDkD,GACF1B,EAAKS,sBAGRhC,IAzGkBuB,EA+Gf6B,YAAc,kBACpBV,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,wBACaF,EAAAC,EAAAC,cAAA,QAAMH,UAAU,yBAAhB,SAEbC,EAAAC,EAAAC,cAAA,UAAQS,QAAS9B,EAAK+B,kBAAtB,iCApHmB/B,EA2Hf+B,iBAAmB,SACzBC,GAEAhC,EAAK2B,SAAS,CAAE1D,UAAWU,MAC3BqB,EAAKwB,aAAa1D,EAAUmE,WAAY,KAAK,IA/HxBjC,EAqIfiC,WAAa,kBACnBd,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,sCACAF,EAAAC,EAAAC,cAAA,QAAMa,SAAUlC,EAAKmC,kBACnBhB,EAAAC,EAAAC,cAAA,SACEe,KAAK,OACLC,YAAY,UACZC,KAAK,OACLC,MAAOvC,EAAKQ,MAAMrC,UAClBqE,SAAUxC,EAAKyC,sBACfC,QAAS1C,EAAK2C,iBACdrB,MAAO,CAAEsB,MAAO,QAASC,YAAa,UAExC1B,EAAAC,EAAAC,cAAA,UAAQe,KAAK,UAAb,WAlJiBpC,EAwJfyC,sBAAwB,SAACT,GAC/BhC,EAAK2B,SAAS,CAAExD,UAAW6D,EAAEc,OAAOP,OAASvC,EAAKS,mBAzJ7BT,EA6Jf2C,iBAAmB,SAACX,GAC1BA,EAAEc,OAAOC,UA9JY/C,EAkKfmC,iBAAmB,SAACH,GAC1BA,EAAEgB,iBAEF,IAAMC,EAAYjD,EAAKQ,MAAMrC,UAEL,GAApB8E,EAAUC,SAIdlD,EAAKmD,UAAUF,GACfjD,EAAKwB,aAAa1D,EAAUsF,OAAQ,KAAK,KA5KpBpD,EAmLfmD,UAAY,SAACE,GACnB,IAAMC,EAAO,CAAEhB,KAAMe,EAAUpF,UAAWU,KAE1CqB,EAAK2B,SACH,CACEvD,YAAakF,GAEftD,EAAKS,mBA1LcT,EAiMfoD,OAAS,kBACfjC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,+BACqB,IAEjBF,EAAAC,EAAAC,cAAA,QAAMH,UAAU,WACblB,EAAKQ,MAAMpC,aAAe4B,EAAKQ,MAAMpC,YAAYkE,OAIxDnB,EAAAC,EAAAC,cAAA,UAAQS,QAAS9B,EAAKuD,sBAAtB,gBA3MmBvD,EAgNfuD,qBAAuB,SAC7BvB,GAEAhC,EAAKwD,UACLxD,EAAKwB,aAAa1D,EAAUmE,WAAY,GAAG,IApNtBjC,EAwNfwD,QAAU,WAChB,GAAKxD,EAAKQ,MAAMpC,aAAgB4B,EAAKQ,MAAMpC,YAAakE,KAAxD,CAIA,IAAMgB,EAAInD,OAAAsD,EAAA,EAAAtD,CAAA,GAAQH,EAAKQ,MAAMpC,YAAnB,CAAgCF,QAASS,MAEnDqB,EAAK2B,SACH,CACEvD,YAAa,GACbG,MAAK,GAAAmF,OAAAvD,OAAAwD,EAAA,EAAAxD,CAAMH,EAAKQ,MAAMjC,OAAjB,CAAwB+E,KAE/BtD,EAAKS,oBApOcT,EA2Of4D,YAAc,kBACpBzC,EAAAC,EAAAC,cAAA,KAAGwC,KAAK,IAAI3C,UAAU,gBAAgBY,QAAS9B,EAAK8D,gBAApD,4BA5OqB9D,EAkPf8D,eAAiB,SACvB9B,GAEAhC,EAAKwD,UACLxD,EAAK2B,SAAS,CAAEzD,QAASS,KAAkB,WAClB,qBAAZ+B,SACTC,aAAaoD,UAKjB/D,EAAKwB,aAAa1D,EAAUkG,YAAa,MA7PpBhE,EAmQfgE,YAAc,WACpB,IAAMC,EAAWjE,EAAKQ,MAAMvC,UACtBiG,EAASlE,EAAKQ,MAAMtC,QACpBiB,EAAY+E,EAASD,EAE3B,OACE9C,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,0BACAF,EAAAC,EAAAC,cAAA,sCACyBrB,EAAKQ,MAAM9B,iBADpC,YAGAyC,EAAAC,EAAAC,cAAA,SACEe,KAAK,QACL+B,IAAI,IACJC,IAAI,MACJ7B,MAAOvC,EAAKQ,MAAM9B,iBAClB8D,SAAUxC,EAAKqE,qBAEjBlD,EAAAC,EAAAC,cAAA,OAAKH,UAAU,gBACbC,EAAAC,EAAAC,cAAA,OAAKH,UAAU,0BACbC,EAAAC,EAAAC,cAAA,UAAKjC,EAAiB6E,IACtB9C,EAAAC,EAAAC,cAAA,UAAKjC,EAAiB8E,KAGxB/C,EAAAC,EAAAC,cAACpB,EAAKqE,SAAN,CACEC,WAAY,EACZC,YAAa,EACbC,cAAe3F,EAAiBK,GAChCkE,SAAS,aACTqB,SAAS,IAGV1E,EAAKQ,MAAMjC,MAAMoG,IAAI,SAACrB,EAAMsB,GAC3B,IAAMC,EAAWvB,EAAKpF,QAAUoF,EAAKrF,UAErC,KAAI4G,EAAW7E,EAAKQ,MAAM9B,iBAAmBX,GAI7C,OACEoD,EAAAC,EAAAC,cAACpB,EAAKqE,SAAN,CACEC,WAAYrF,EAAU+E,EAAUX,EAAKrF,UAAWkB,GAChDqF,YAAatF,EAAUoE,EAAKpF,QAASgG,EAAQ/E,GAC7CsF,cAAe3F,EAAiB+F,GAChCxB,SAAUC,EAAKhB,KACfwC,IAAKF,SAhTI5E,EA4TfsE,SAAW,SAACvE,GAAD,OACjBoB,EAAAC,EAAAC,cAAA,OACEH,UAAU,oBACVI,MAAO,CACLyD,WAAYhF,EAAMwE,WAAa,IAC/B1B,YAAa9C,EAAMyE,YAAc,MAGnCrD,EAAAC,EAAAC,cAAA,SAAOC,MAAO,CAAE0D,OAAQ,EAAGC,WAAY,WACpClF,EAAMsD,SADT,KACqBzD,EAAiBG,EAAM0E,gBAE5CtD,EAAAC,EAAAC,cAAA,OAAKH,UAAWnB,EAAM2E,QAAU,qBAAuB,eAvUpC1E,EA2UfqE,mBAAqB,SAACa,GAAD,OAC3BlF,EAAK2B,SAAS,CAAEjD,iBAAkBwG,EAAMpC,OAAOP,SA5U1BvC,EAiVfmF,eAAiB,kBACvBhE,EAAAC,EAAAC,cAAA,KAAGwC,KAAK,IAAI3C,UAAU,gBAAgBY,QAAS9B,EAAKoF,kBAApD,eAlVqBpF,EAwVfoF,iBAAmB,SACzBpD,GAEAhC,EAAK2B,SAAS3D,IAxVS,qBAAZ0C,QACT,OAAAP,OAAAE,EAAA,EAAAF,CAAAH,GAGF,IAAMqF,EAAmB1E,aAAa2E,QAAQ,SAC1CD,GAAoBA,EAAiBnC,OAAS,IACzBqC,QACrB,yEAGAvF,EAAKQ,MAAQK,KAAK2E,MAAMH,KAbP,OAAArF,wEAuBrB,OACEmB,EAAAC,EAAAC,cAAA,OAAKH,UAAU,OACbC,EAAAC,EAAAC,cAAAnB,KAAMa,aAAN,KACGb,KAAKM,MAAMnC,WAAaP,EAAUQ,MAAQ6C,EAAAC,EAAAC,cAAAnB,KAAM2B,YAAN,MAAuB,GACjE3B,KAAKM,MAAMnC,WAAaP,EAAUmE,WACjCd,EAAAC,EAAAC,cAAAnB,KAAM+B,WAAN,MAEA,GAED/B,KAAKM,MAAMnC,WAAaP,EAAUsF,OAASjC,EAAAC,EAAAC,cAAAnB,KAAMkD,OAAN,MAAkB,GAC7DlD,KAAKM,MAAMnC,WAAaP,EAAUkG,YACjC7C,EAAAC,EAAAC,cAAAnB,KAAM8D,YAAN,MAEA,IAKH9D,KAAKM,MAAMnC,WAAaP,EAAUQ,OACnC4B,KAAKM,MAAMnC,WAAaP,EAAUkG,YAChC7C,EAAAC,EAAAC,cAAAnB,KAAM0D,YAAN,MAEA,GAED1D,KAAKM,MAAMnC,WAAaP,EAAUkG,YACjC7C,EAAAC,EAAAC,cAAAnB,KAAMiF,eAAN,MAEA,WAvDQM,aCnHEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO7E,EAAAC,EAAAC,cAAC4E,EAAD,MAASC,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.4d3fd3d0.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./App.css\";\n\n// TODO: See if service-workers can be leveraged somehow\n\n/** Indicates the current state of the application */\nenum FlowState {\n  /** The user has just started */\n  Start,\n  /** The user needs to input their flow task */\n  FlowPrompt,\n  /** The user is flowing on a task */\n  InFlow,\n  /** The user is done and wants to see a summary of their work */\n  FlowSummary\n}\n\n/** The number of seconds in a minute */\nconst SECONDS_IN_MINUTE = 60;\n/** The default amount of time, in minutes, needed for a task\n * to be considered in flow, currently set to 1 hour */\nconst DEFAULT_ALLOWED_FLOW_LENGTH = 60;\n\n/** The default application state */\nconst DEFAULT_STATE = {\n  /** The time work was started */\n  startTime: 0,\n  /** The time work was ended */\n  endTime: 0,\n  /** The value of the input field for a flow task */\n  flowInput: \"\",\n  /** The current task being flowed on */\n  currentFlow: null as IFlowItem | null,\n  /** The current state of the application */\n  flowState: FlowState.Start,\n  /** A list of completed flow tasks */\n  flows: [] as IFlowItem[],\n  /** Whether we are transitioning between screens */\n  inTransition: false,\n  /** Amount of time, in milliseconds, for a given screen to transition */\n  transitionTime: 0,\n  /** Number of time, in minutes, for which flow tasks less than this are filtered out */\n  filterFlowLength: DEFAULT_ALLOWED_FLOW_LENGTH\n};\n\n/**\n * An instance of flow\n */\ninterface IFlowItem {\n  /** The name of the task being flowed */\n  name: string;\n  /** The time, in seconds, that the task was started */\n  startTime: number;\n  /** The time, in seconds, that the task was completed */\n  endTime: number;\n}\n\n/**\n * Props for the FlowItem component\n */\ninterface IFlowItemProps {\n  /** The percentage offset from the left */\n  leftOffset: number;\n  /** The percentage offset from the right */\n  rightOffset: number;\n  /** The name of the task */\n  taskName: string;\n  /** The number of minutes spent in flow */\n  minutesOnFlow: number;\n  /** Whether the flow item should represent the total work time, will add special styling */\n  isTotal?: boolean;\n}\n\n/**\n * @returns the number of seconds in a date since\n * midnight of January 1, 1970\n */\nconst getTimeStamp = () => Date.now() / 1000;\n\n/**\n * @returns minutes, rounded to the nearest whole number\n * @param seconds number of seconds to convert\n */\nconst secondsToMinutes = (seconds: number) =>\n  Math.round(seconds / SECONDS_IN_MINUTE);\n\n/**\n * @returns the % offset from the total\n * @param startTime the start time\n * @param endTime the end time\n * @param totalTime the total time\n */\nconst getOffset = (startTime: number, endTime: number, totalTime: number) =>\n  ((endTime - startTime) / totalTime) * 100;\n\n/**\n * @returns formatted time to display\n * @param time number of seconds since midnight of January 1, 1970\n */\nconst displayTimeStamp = (time: number) => {\n  const timeStamp = new Date(time * 1000); // Convert seconds back to milliseconds\n  const hours = timeStamp.getHours();\n  const minutes = timeStamp.getMinutes();\n  const ampm = hours >= 12 ? \"pm\" : \"am\";\n\n  let formattedHours = hours % 12;\n  formattedHours = hours == 0 ? 12 : formattedHours; // Zero hour is 12\n\n  const formattedMinutes = minutes < 10 ? \"0\" + minutes : minutes;\n\n  return formattedHours + \":\" + formattedMinutes + ampm;\n};\n\n/**\n * @returns formatted time to display in hours and minutes\n * @param minutes number of minutes\n */\nconst displayTimeSpent = (minutes: number) => {\n  const hours = Math.floor(minutes / 60);\n  const minutesRemaining = minutes % 60;\n\n  return hours + \" hours and \" + minutesRemaining + \" minutes\";\n};\n\n/**\n * The flow application\n */\nclass App extends Component {\n  /**\n   * Tries to load in saved state\n   * @param props there are no props\n   */\n  constructor(props: {}) {\n    super(props);\n\n    if (typeof Storage === \"undefined\") {\n      return;\n    }\n\n    const localStateString = localStorage.getItem(\"state\");\n    if (localStateString && localStateString.length > 0) {\n      const loadLocalState = confirm(\n        \"We found data from a previous flow session. Do you want to load it?\"\n      );\n      if (loadLocalState) {\n        this.state = JSON.parse(localStateString);\n      }\n    }\n  }\n\n  /** The state of the application */\n  public state = DEFAULT_STATE;\n\n  /** Renders the application */\n  public render() {\n    return (\n      <div className=\"App\">\n        <this.StateWrapper>\n          {this.state.flowState == FlowState.Start ? <this.StartScreen /> : \"\"}\n          {this.state.flowState == FlowState.FlowPrompt ? (\n            <this.FlowPrompt />\n          ) : (\n            \"\"\n          )}\n          {this.state.flowState == FlowState.InFlow ? <this.InFlow /> : \"\"}\n          {this.state.flowState == FlowState.FlowSummary ? (\n            <this.FlowSummary />\n          ) : (\n            \"\"\n          )}\n        </this.StateWrapper>\n\n        {/* Keep end links outside of state wrapper so they don't awkwardly fade back in */}\n        {this.state.flowState != FlowState.Start &&\n        this.state.flowState != FlowState.FlowSummary ? (\n          <this.EndFlowLink />\n        ) : (\n          \"\"\n        )}\n        {this.state.flowState == FlowState.FlowSummary ? (\n          <this.ResetStateLink />\n        ) : (\n          \"\"\n        )}\n      </div>\n    );\n  }\n\n  /**\n   * Saves React app state to localStorage\n   */\n  private saveStateToLocal = () => {\n    if (typeof Storage !== \"undefined\") {\n      localStorage.setItem(\"state\", JSON.stringify(this.state));\n    } else {\n      // Sorry! No Web Storage support..\n    }\n  };\n\n  private StateWrapper: React.StatelessComponent<{\n    className?: string;\n  }> = ({ children, className }) => (\n    <div\n      className={\n        this.state.inTransition\n          ? className\n            ? \"fade-out\" + className\n            : \"fade-out\"\n          : className\n          ? \"fade-in \" + className\n          : \"fade-in\"\n      }\n      style={{ animationDuration: this.state.transitionTime + \"ms\" }}\n    >\n      {children}\n    </div>\n  );\n\n  /**\n   * Triggers a transtion between states\n   * @param nextState the state to transition to\n   * @param transitionTime the amount of time, in milliseconds, to transition in/out of states\n   * @param saveState whether to save app state to local storage after transition\n   */\n  private doTranistion = (\n    nextState: FlowState,\n    transitionTime: number,\n    saveState?: boolean\n  ) => {\n    this.setState({ inTransition: true, transitionTime: transitionTime });\n\n    setTimeout(() => {\n      this.setState({ flowState: nextState, inTransition: false }, () => {\n        if (saveState) {\n          this.saveStateToLocal();\n        }\n      });\n    }, transitionTime);\n  };\n\n  /**\n   * The component for the start screen\n   */\n  private StartScreen = () => (\n    <div>\n      <h1>\n        Welcome to <span className=\"fade-in ani-3 special\">Flow</span>\n      </h1>\n      <button onClick={this.handleStartClick}>\n        Click here to start flowing\n      </button>\n    </div>\n  );\n\n  /** Event handler for when the start button is clicked */\n  private handleStartClick = (\n    e: React.MouseEvent<HTMLButtonElement, MouseEvent>\n  ) => {\n    this.setState({ startTime: getTimeStamp() });\n    this.doTranistion(FlowState.FlowPrompt, 500, true);\n  };\n\n  /**\n   * The component for the flow input prompt\n   */\n  private FlowPrompt = () => (\n    <div>\n      <h1>What are you flowing on?</h1>\n      <form onSubmit={this.handleFlowSubmit}>\n        <input\n          type=\"text\"\n          placeholder=\"My task\"\n          name=\"flow\"\n          value={this.state.flowInput}\n          onChange={this.handleFlowInputChange}\n          onFocus={this.handleInputFocus}\n          style={{ width: \"250px\", marginRight: \"1rem\" }}\n        />\n        <button type=\"submit\">Flow</button>\n      </form>\n    </div>\n  );\n\n  /** Event handler for when the flow input field is changed */\n  private handleFlowInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    this.setState({ flowInput: e.target.value }, this.saveStateToLocal);\n  };\n\n  /** Event handler for when the flow input field gains focus */\n  private handleInputFocus = (e: React.FocusEvent<HTMLInputElement>) => {\n    e.target.select();\n  };\n\n  /** Event handler for when the flow task is submitted */\n  private handleFlowSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n\n    const inputFlow = this.state.flowInput;\n\n    if (inputFlow.length == 0) {\n      return;\n    }\n\n    this.startFlow(inputFlow);\n    this.doTranistion(FlowState.InFlow, 500, true);\n  };\n\n  /**\n   * Creates and starts flow for a given task\n   * @param taskName the name of the task to be flowed\n   */\n  private startFlow = (taskName: string) => {\n    const flow = { name: taskName, startTime: getTimeStamp() };\n\n    this.setState(\n      {\n        currentFlow: flow\n      },\n      this.saveStateToLocal\n    );\n  };\n\n  /**\n   * The component for the in-flow screen\n   */\n  private InFlow = () => (\n    <div>\n      <h1>\n        You are flowing on{\" \"}\n        {\n          <span className=\"special\">\n            {this.state.currentFlow && this.state.currentFlow.name}\n          </span>\n        }\n      </h1>\n      <button onClick={this.handlePauseFlowClick}>Pause flow</button>\n    </div>\n  );\n\n  /** Event handler for when the pause flow button is clicked */\n  private handlePauseFlowClick = (\n    e: React.MouseEvent<HTMLButtonElement, MouseEvent>\n  ) => {\n    this.endFlow();\n    this.doTranistion(FlowState.FlowPrompt, 0, true);\n  };\n\n  /** Ends the current flow and adds it to the flow list */\n  private endFlow = () => {\n    if (!this.state.currentFlow || !this.state.currentFlow!.name) {\n      return;\n    }\n\n    const flow = { ...this.state.currentFlow, endTime: getTimeStamp() };\n\n    this.setState(\n      {\n        currentFlow: {},\n        flows: [...this.state.flows, flow]\n      },\n      this.saveStateToLocal // TODO: is this needed, or would doTransition above be enough?\n    );\n  };\n\n  /**\n   * The component for a link to end work\n   */\n  private EndFlowLink = () => (\n    <a href=\"#\" className=\"end-flow-link\" onClick={this.handleEndClick}>\n      End your flow for today\n    </a>\n  );\n\n  /** Event handler for when the end flow link is clicked */\n  private handleEndClick = (\n    e: React.MouseEvent<HTMLAnchorElement, MouseEvent>\n  ) => {\n    this.endFlow();\n    this.setState({ endTime: getTimeStamp() }, () => {\n      if (typeof Storage !== \"undefined\") {\n        localStorage.clear();\n      } else {\n        // Sorry! No Web Storage support..\n      }\n    });\n    this.doTranistion(FlowState.FlowSummary, 500);\n  };\n\n  /**\n   * The component for the flow summary screen\n   */\n  private FlowSummary = () => {\n    const dayStart = this.state.startTime;\n    const dayEnd = this.state.endTime;\n    const totalTime = dayEnd - dayStart;\n\n    return (\n      <div>\n        <h1>Flow Summary</h1>\n        <label>\n          Filter flow less than {this.state.filterFlowLength} minutes\n        </label>\n        <input\n          type=\"range\"\n          min=\"0\"\n          max=\"120\"\n          value={this.state.filterFlowLength}\n          onChange={this.handleSliderChange}\n        />\n        <div className=\"flow-summary\">\n          <div className=\"flow-summary-time-ends\">\n            <h2>{displayTimeStamp(dayStart)}</h2>\n            <h2>{displayTimeStamp(dayEnd)}</h2>\n          </div>\n\n          <this.FlowItem\n            leftOffset={0}\n            rightOffset={0}\n            minutesOnFlow={secondsToMinutes(totalTime)}\n            taskName=\"Total Time\"\n            isTotal={true}\n          />\n\n          {this.state.flows.map((flow, index) => {\n            const flowTime = flow.endTime - flow.startTime;\n\n            if (flowTime < this.state.filterFlowLength * SECONDS_IN_MINUTE) {\n              return;\n            }\n\n            return (\n              <this.FlowItem\n                leftOffset={getOffset(dayStart, flow.startTime, totalTime)}\n                rightOffset={getOffset(flow.endTime, dayEnd, totalTime)}\n                minutesOnFlow={secondsToMinutes(flowTime)}\n                taskName={flow.name}\n                key={index}\n              />\n            );\n          })}\n        </div>\n      </div>\n    );\n  };\n\n  /**\n   * The component for a flow item in the summary screen\n   */\n  private FlowItem = (props: IFlowItemProps) => (\n    <div\n      className=\"flow-summary-item\"\n      style={{\n        marginLeft: props.leftOffset + \"%\",\n        marginRight: props.rightOffset + \"%\"\n      }}\n    >\n      <label style={{ margin: 0, whiteSpace: \"nowrap\" }}>\n        {props.taskName}: {displayTimeSpent(props.minutesOnFlow)}\n      </label>\n      <div className={props.isTotal ? \"total-div flow-div\" : \"flow-div\"} />\n    </div>\n  );\n\n  private handleSliderChange = (event: React.ChangeEvent<HTMLInputElement>) =>\n    this.setState({ filterFlowLength: event.target.value });\n\n  /**\n   * The component for a link to end work\n   */\n  private ResetStateLink = () => (\n    <a href=\"#\" className=\"end-flow-link\" onClick={this.handleResetClick}>\n      Start over\n    </a>\n  );\n\n  /** Event handler for when the end flow link is clicked */\n  private handleResetClick = (\n    e: React.MouseEvent<HTMLAnchorElement, MouseEvent>\n  ) => {\n    this.setState(DEFAULT_STATE);\n  };\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}